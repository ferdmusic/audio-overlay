# GitHub workflow to build and release AudioMonitor WPF application
# This workflow builds the application in Release mode and creates a GitHub release with the binaries

name: Build and Release AudioMonitor

on:
  push:
    branches: [ "main", "master" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build:
    runs-on: windows-latest

    env:
      Solution_Name: AudioMonitorSolution\AudioMonitorSolution.sln
      Project_Path: AudioMonitorSolution\AudioMonitor.UI\AudioMonitor.UI.csproj
      Output_Directory: AudioMonitorSolution\AudioMonitor.UI\bin\Release\net8.0-windows
      Publish_Directory: AudioMonitorSolution\AudioMonitor.UI\bin\Release\net8.0-windows\publish

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore $env:Solution_Name

    # Build the solution in Release mode
    - name: Build solution
      run: dotnet build $env:Solution_Name --configuration Release --no-restore

    # Run tests if any exist
    - name: Run tests
      run: dotnet test $env:Solution_Name --configuration Release --no-build --verbosity normal
      continue-on-error: true

    # Publish the application with all dependencies
    - name: Publish application
      run: |
        dotnet publish $env:Project_Path `
          --configuration Release `
          --output publish `
          --runtime win-x64 `
          --self-contained false `
          --verbosity normal

    # Copy the icon file to the publish directory
    - name: Copy application icon
      run: |
        if (Test-Path "AudioMonitorSolution\image.ico") {
          Copy-Item "AudioMonitorSolution\image.ico" "publish\image.ico"
        }

    # Create release package
    - name: Create release package
      run: |
        $releaseDir = "AudioMonitor-Release"
        New-Item -ItemType Directory -Path $releaseDir -Force
        
        # Copy published files
        Copy-Item -Path "publish\*" -Destination $releaseDir -Recurse -Force
        
        # Create ZIP package
        Compress-Archive -Path $releaseDir -DestinationPath "AudioMonitor-Windows-x64.zip" -Force

    # Upload build artifacts for all builds
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: AudioMonitor-Windows-x64
        path: AudioMonitor-Windows-x64.zip

    # Create GitHub Release only for tags
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: AudioMonitor ${{ github.ref_name }}
        body: |
          ## AudioMonitor Release ${{ github.ref_name }}
          
          ### Features
          - Audio level monitoring with visual overlay
          - System tray integration
          - Customizable warning thresholds
          - Modern WPF interface
          
          ### Installation
          1. Download the `AudioMonitor-Windows-x64.zip` file
          2. Extract to a folder of your choice
          3. Run `AudioMonitor.UI.exe`
          
          ### Requirements
          - Windows 10/11
          - .NET 8.0 Runtime (Desktop Apps)
          
          ### Changes
          See the commit history for detailed changes in this release.
        draft: false
        prerelease: false

    # Upload release asset only for tags
    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./AudioMonitor-Windows-x64.zip
        asset_name: AudioMonitor-Windows-x64.zip
        asset_content_type: application/zip

  # Optional: Create a self-contained build (larger but doesn't require .NET runtime)
  build-self-contained:
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    env:
      Solution_Name: AudioMonitorSolution\AudioMonitorSolution.sln
      Project_Path: AudioMonitorSolution\AudioMonitor.UI\AudioMonitor.UI.csproj

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore $env:Solution_Name

    - name: Publish self-contained application
      run: |
        dotnet publish $env:Project_Path `
          --configuration Release `
          --output publish-standalone `
          --runtime win-x64 `
          --self-contained true `
          --verbosity normal `
          -p:PublishSingleFile=true `
          -p:PublishTrimmed=false

    - name: Copy application icon
      run: |
        if (Test-Path "AudioMonitorSolution\image.ico") {
          Copy-Item "AudioMonitorSolution\image.ico" "publish-standalone\image.ico"
        }

    - name: Create self-contained package
      run: |
        $releaseDir = "AudioMonitor-Standalone"
        New-Item -ItemType Directory -Path $releaseDir -Force
        Copy-Item -Path "publish-standalone\*" -Destination $releaseDir -Recurse -Force
        Compress-Archive -Path $releaseDir -DestinationPath "AudioMonitor-Windows-x64-Standalone.zip" -Force

    - name: Upload standalone artifacts
      uses: actions/upload-artifact@v4
      with:
        name: AudioMonitor-Windows-x64-Standalone
        path: AudioMonitor-Windows-x64-Standalone.zip

    - name: Upload Standalone Release Asset
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./AudioMonitor-Windows-x64-Standalone.zip
        asset_name: AudioMonitor-Windows-x64-Standalone.zip
        asset_content_type: application/zip
