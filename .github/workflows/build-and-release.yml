# GitHub workflow to build and release AudioMonitor WPF application
# This workflow builds the application in Release mode and creates a GitHub release with the binaries

name: Build and Release

on:
  push:
    branches:
      - main
      - master # Falls du master verwendest
    tags:
      - 'v*' # Pushes zu v* Tags
  pull_request:
    branches:
      - main
      - master # Falls du master verwendest

env:
  Solution_Name: AudioMonitorSolution\AudioMonitorSolution.sln
  Project_Path: AudioMonitorSolution\AudioMonitor.UI\AudioMonitor.UI.csproj
  Output_Directory: AudioMonitorSolution\AudioMonitor.UI\bin\Release\net8.0-windows
  Publish_Directory: AudioMonitorSolution\AudioMonitor.UI\bin\Release\net8.0-windows\publish

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write # Erforderlich zum Erstellen von Tags und Releases
      packages: read  # Beibehalten, falls für dotnet restore von GitHub Packages benötigt
    outputs: # Added to share release upload URL
      release_upload_url: ${{ steps.create_tagged_release.outputs.upload_url }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Erforderlich, um Tags abzurufen und neue zu pushen

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # Spezifiziere deine .NET Version

      - name: Restore Dependencies
        run: dotnet restore $env:Solution_Name --runtime win-x64

      - name: Build Project
        run: dotnet build $env:Solution_Name --configuration Release --no-restore --runtime win-x64

      - name: Run Tests
        run: dotnet test $env:Solution_Name --configuration Release --no-build --verbosity normal

      - name: Publish Project as Single Executable # Modified
        run: dotnet publish $env:Project_Path --configuration Release --output publish --runtime win-x64 --self-contained false -p:PublishSingleFile=true --verbosity normal
        # --self-contained false, da das .NET Runtime auf dem Zielsystem erwartet wird oder mitinstalliert wird

      - name: Copy Icon if exists
        run: |
          if (Test-Path "AudioMonitorSolution\image.ico") {
            Copy-Item "AudioMonitorSolution\image.ico" "publish\image.ico"
          }
        shell: pwsh

      - name: Prepare Release Executable # Modified
        id: prepare_executable
        run: |
          $executableName = (Get-Item $env:Project_Path).BaseName
          $sourceExecutable = "publish\\$executableName.exe"
          $targetExecutable = "AudioMonitor-Windows-x64.exe"
          Copy-Item -Path $sourceExecutable -Destination $targetExecutable -Force
          echo "EXECUTABLE_NAME=$targetExecutable" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Upload build artifact (executable) # Modified
        uses: actions/upload-artifact@v4
        with:
          name: AudioMonitor-Windows-x64-Executable
          path: ./${{ env.EXECUTABLE_NAME }}

      # --- Release für v*-Tags (Produktions-Release) ---
      - name: Create Release for v-Tag
        if: startsWith(github.ref, 'refs/tags/v')
        id: create_tagged_release # ID is used for output
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }} # github.ref_name gibt den Tag-Namen direkt
          body: "Offizielles Release für Version ${{ github.ref_name }}"
          draft: false
          prerelease: false

      - name: Upload Release Asset for v-Tag (executable) # Modified
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_tagged_release.outputs.upload_url }}
          asset_path: ./${{ env.EXECUTABLE_NAME }}
          asset_name: AudioMonitor-Windows-x64-${{ github.ref_name }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      # --- Pre-Release für main-Branch Pushes ---
      - name: Create Tag for Main Branch Build
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          $tagName = "dev-build-${{ github.run_number }}-${{ github.sha }}"
          echo "DEV_TAG_NAME=$tagName" | Out-File -FilePath $env:GITHUB_ENV -Append
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          git tag $tagName
          git push origin $tagName
        shell: pwsh

      - name: Create Release for Main Branch Build
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: create_main_prerelease
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.DEV_TAG_NAME }}
          release_name: "Development Build (main #${{ github.run_number }})"
          body: "Automatisches Pre-Release vom Push auf den main-Branch. Commit: ${{ github.sha }}. Build-Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          draft: false
          prerelease: true

      - name: Upload Asset for Main Branch Release (executable) # Modified
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_main_prerelease.outputs.upload_url }}
          asset_path: ./${{ env.EXECUTABLE_NAME }}
          asset_name: AudioMonitor-Windows-x64-${{ env.DEV_TAG_NAME }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

  # Optional: Create a self-contained build (larger but doesn't require .NET runtime)
  build-self-contained:
    needs: build # Added dependency for release_upload_url
    runs-on: windows-latest
    # env section should be here if it's specific to this job, or use global env
    env:
      Solution_Name: AudioMonitorSolution\AudioMonitorSolution.sln
      Project_Path: AudioMonitorSolution\AudioMonitor.UI\AudioMonitor.UI.csproj
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore $env:Solution_Name --runtime win-x64

    - name: Publish self-contained application
      run: |
        dotnet publish $env:Project_Path `
          --configuration Release `
          --output publish-standalone `
          --runtime win-x64 `
          --self-contained true `
          --verbosity normal `
          -p:PublishSingleFile=true `
          -p:PublishTrimmed=false # Kept PublishTrimmed=false as per original

    - name: Copy application icon
      run: |
        if (Test-Path "AudioMonitorSolution\\image.ico") {
          Copy-Item "AudioMonitorSolution\\image.ico" "publish-standalone\\image.ico"
        }

    - name: Prepare Self-Contained Executable # Modified
      id: prepare_standalone_executable
      run: |
        $executableName = (Get-Item $env:Project_Path).BaseName
        $sourceExecutable = "publish-standalone\\$executableName.exe"
        $targetExecutable = "AudioMonitor-Windows-x64-Standalone.exe"
        Copy-Item -Path $sourceExecutable -Destination $targetExecutable -Force
        echo "STANDALONE_EXECUTABLE_NAME=$targetExecutable" | Out-File -FilePath $env:GITHUB_ENV -Append
      shell: pwsh

    - name: Upload standalone artifacts (executable) # Modified
      uses: actions/upload-artifact@v4
      with:
        name: AudioMonitor-Windows-x64-Standalone-Executable
        path: ./${{ env.STANDALONE_EXECUTABLE_NAME }}

    - name: Upload Standalone Release Asset (executable) # Modified
      if: startsWith(github.ref, 'refs/tags/v') # This if is fine, job also has it.
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.build.outputs.release_upload_url }} # Corrected upload_url
        asset_path: ./${{ env.STANDALONE_EXECUTABLE_NAME }}
        asset_name: AudioMonitor-Windows-x64-Standalone-${{ github.ref_name }}.exe
        asset_content_type: application/vnd.microsoft.portable-executable
